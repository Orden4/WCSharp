# Rules in this file were initially inferred by Visual Studio IntelliCode from the C:\Macomi\por\Simulation\PortSimulation codebase based on best match to current usage at 12/08/2019
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference

root = true

[*.cs]
# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization             = pascal_case

dotnet_naming_style.camel_case_style.capitalization              = camel_case

dotnet_naming_style.i_prefix_style.required_prefix               = I
dotnet_naming_style.i_prefix_style.capitalization                = pascal_case
dotnet_naming_style.constant_style.capitalization                = all_upper
dotnet_naming_style.constant_style.word_separator                = _

# Constants are UPPERCASE
dotnet_naming_rule.constants_should_be_upper_case.severity       = warning
dotnet_naming_rule.constants_should_be_upper_case.symbols        = constants
dotnet_naming_rule.constants_should_be_upper_case.style          = constant_style

dotnet_naming_symbols.constants.applicable_kinds                 = field, local
dotnet_naming_symbols.constants.required_modifiers               = const

# Use PascalCase for public fields
dotnet_naming_rule.pascal_case_for_public_fields.severity        = warning
dotnet_naming_rule.pascal_case_for_public_fields.symbols         = public_fields
dotnet_naming_rule.pascal_case_for_public_fields.style           = pascal_case_style
dotnet_naming_symbols.public_fields.applicable_kinds             = field
dotnet_naming_symbols.public_fields.applicable_accessibilities   = public

# Interfaces must be PascalCase and have an I prefix
dotnet_naming_rule.interfaces_start_with_I.severity              = warning
dotnet_naming_rule.interfaces_start_with_I.symbols               = any_interface
dotnet_naming_rule.interfaces_start_with_I.style                 = i_prefix_style
dotnet_naming_symbols.any_interface.applicable_kinds             = interface
dotnet_naming_symbols.any_interface.applicable_accessibilities   = *

# Classes, structs, methods, enums, events, properties, namespaces, delegates must be PascalCase
dotnet_naming_rule.general_naming.severity                       = warning
dotnet_naming_rule.general_naming.symbols                        = general
dotnet_naming_rule.general_naming.style                          = pascal_case_style
dotnet_naming_symbols.general.applicable_kinds                   = class,struct,enum,property,method,event,namespace,delegate,type_parameter
dotnet_naming_symbols.general.applicable_accessibilities         = *

# Everything else is camelCase
dotnet_naming_rule.everything_else_naming.severity               = warning
dotnet_naming_rule.everything_else_naming.symbols                = everything_else
dotnet_naming_rule.everything_else_naming.style                  = camel_case_style
dotnet_naming_symbols.everything_else.applicable_kinds           = *
dotnet_naming_symbols.everything_else.applicable_accessibilities = *

# CSharp and Visual Basic code style settings:
[*.{cs,vb}]
dotnet_style_require_accessibility_modifiers               = always : error
dotnet_style_readonly_field                                = true : error

dotnet_style_parentheses_in_arithmetic_binary_operators    = always_for_clarity : suggestion
dotnet_style_parentheses_in_relational_binary_operators    = always_for_clarity : suggestion
dotnet_style_parentheses_in_other_binary_operators         = always_for_clarity : suggestion
dotnet_style_parentheses_in_other_operators                = never_if_unnecessary : suggestion

dotnet_style_object_initializer                            = true : error
dotnet_style_collection_initializer                        = true : error
dotnet_style_explicit_tuple_names                          = true : suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names   = true : suggestion
dotnet_style_prefer_auto_properties                        = true : suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true : suggestion
dotnet_style_prefer_conditional_expression_over_return     = true : suggestion

dotnet_style_coalesce_expression                           = true : suggestion
dotnet_style_null_propagation                              = true : suggestion

dotnet_code_quality_unused_parameters                      = all : suggestion
dotnet_style_prefer_compound_assignment                    = true : error
#do not place System.* using directives before other using directives
dotnet_sort_system_directives_first                        = true
dotnet_separate_import_directive_groups                    = false

#Core editorconfig formatting - indentation

#use hard tabs for indentation
indent_style                                               = tab
insert_final_newline                                       = true
max_line_length                                            = 180

#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access             = true : suggestion

# CSharp code style settings:
[*.cs]
csharp_preferred_modifier_order                                          = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async : suggestion

#Formatting - new line options

#require braces to be on a new line for object_collection_array_initializers, control_blocks, lambdas, anonymous_types, types, methods, and properties (also known as "Allman" style)
csharp_new_line_before_open_brace                                        = all
csharp_new_line_before_else                                              = true
csharp_new_line_before_catch                                             = true
csharp_new_line_before_finally                                           = true
csharp_new_line_before_members_in_object_initializers                    = true
csharp_new_line_before_members_in_anonymous_types                        = true
csharp_new_line_between_query_expression_clauses                         = true

#Formatting - organize using options

#Formatting - spacing options

csharp_space_after_cast                                                  = false
csharp_space_after_keywords_in_control_flow_statements                   = true
csharp_space_between_parentheses                                         = false
csharp_space_before_colon_in_inheritance_clause                          = true
csharp_space_after_colon_in_inheritance_clause                           = true
csharp_space_around_binary_operators                                     = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses       = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis        = false
csharp_space_between_method_call_parameter_list_parentheses              = false
csharp_space_between_method_call_empty_parameter_list_parentheses        = false
csharp_space_between_method_call_name_and_opening_parenthesis            = false
csharp_space_after_comma                                                 = true
csharp_space_before_comma                                                = false
csharp_space_after_dot                                                   = false
csharp_space_before_dot                                                  = false
csharp_space_after_semicolon_in_for_statement                            = true
csharp_space_before_semicolon_in_for_statement                           = false
csharp_space_around_declaration_statements                               = false
csharp_space_before_open_square_brackets                                 = false
csharp_space_between_empty_square_brackets                               = false
csharp_space_between_square_brackets                                     = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks                                       = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements                                   = false

#Style - expression bodied member options

#prefer block bodies for accessors
csharp_style_expression_bodied_methods                                   = false : error
csharp_style_expression_bodied_constructors                              = false : error
csharp_style_expression_bodied_operators                                 = false : error
csharp_style_expression_bodied_properties                                = true : error
csharp_style_expression_bodied_indexers                                  = true : error
csharp_style_expression_bodied_accessors                                 = true : error
csharp_style_expression_bodied_lambdas                                   = true : suggestion
csharp_style_expression_bodied_local_functions                           = false : error

csharp_style_pattern_matching_over_is_with_cast_check                    = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check                    = true : suggestion

#Style - expression level options

#prefer out variables to be declared before the method call
csharp_style_inlined_variable_declaration                                = true : error

#Style - implicit and explicit types

csharp_style_var_for_built_in_types                                      = true : error
csharp_style_var_when_type_is_apparent                                   = true : error
csharp_style_var_elsewhere                                               = true : error

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members               = true : suggestion

csharp_style_throw_expression                                            = true : suggestion
csharp_style_conditional_delegate_call                                   = true : suggestion

csharp_prefer_braces                                                     = true : silent

csharp_style_unused_value_expression_statement_preference                = discard_variable : none
csharp_style_unused_value_assignment_preference                          = discard_variable : none

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field                                     = true : error
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method                                    = false : error
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property                                  = false : error
dotnet_style_qualification_for_event                                     = false : error

csharp_style_deconstructed_variable_declaration                          = true : suggestion
csharp_style_pattern_local_over_anonymous_function                       = true : suggestion
csharp_using_directive_placement                                         = outside_namespace : error

csharp_indent_case_contents                                              = true
csharp_indent_switch_labels                                              = true
csharp_indent_labels                                                     = no_change
csharp_indent_block_contents                                             = true
csharp_indent_braces                                                     = false
csharp_indent_case_contents_when_block                                   = false

# C# 7.1+ settings
csharp_prefer_simple_default_expression                                  = true : suggestion
dotnet_style_prefer_inferred_tuple_names                                 = false : silent

# C# 8.0+ settings
csharp_style_prefer_index_operator                                       = false : silent
csharp_style_prefer_range_operator                                       = false : silent
csharp_style_prefer_switch_expression                                    = true : suggestion
csharp_prefer_static_local_function                                      = true : suggestion
csharp_prefer_simple_using_statement                                     = true : suggestion

# CA1062: Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = none
# CA1707: Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = none
# CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = suggestion