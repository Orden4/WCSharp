<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCSharp.Events</name>
    </assembly>
    <members>
        <member name="T:WCSharp.Events.IPeriodicAction">
            <summary>
            Interface for defining periodic actions. If your periodic action has actions that it should perform when ended, use <see cref="T:WCSharp.Events.IPeriodicDisposableAction"/> instead.
            </summary>
        </member>
        <member name="P:WCSharp.Events.IPeriodicAction.Active">
            <summary>
            Indicates the active state of this IPeriodicAction. Set this to false to disable and remove this instance.
            </summary>
        </member>
        <member name="M:WCSharp.Events.IPeriodicAction.Action">
            <summary>
            The action that will be invoked every period by <see cref="T:WCSharp.Events.PeriodicTrigger`1"/>.
            </summary>
        </member>
        <member name="T:WCSharp.Events.IPeriodicDisposableAction">
            <summary>
            Interface for defining periodic actions. If your periodic action does not have actions that it should perform when ended, use <see cref="T:WCSharp.Events.IPeriodicAction"/> instead.
            </summary>
        </member>
        <member name="P:WCSharp.Events.IPeriodicDisposableAction.Active">
            <summary>
            Indicates the active state of this IPeriodicAction. Set this to false to disable and dispose this instance.
            </summary>
        </member>
        <member name="M:WCSharp.Events.IPeriodicDisposableAction.Action">
            <summary>
            The action that will be invoked every period by <see cref="T:WCSharp.Events.PeriodicDisposableTrigger`1"/>.
            </summary>
        </member>
        <member name="M:WCSharp.Events.IPeriodicDisposableAction.Dispose">
            <summary>
            Automatically called after <see cref="P:WCSharp.Events.IPeriodicDisposableAction.Active"/> is set to false.
            </summary>
        </member>
        <member name="T:WCSharp.Events.PeriodicDisposableTrigger`1">
            <summary>
            Helpful class that can be used to batch together multiple periodic events of the same type. Will automatically remove inactive triggers, and
            subscribe/unsubscribe from <see cref="T:WCSharp.Events.PeriodicEvents"/> based on whether any triggers are active.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WCSharp.Events.PeriodicDisposableTrigger`1.Actions">
            <summary>
            All currently active periodic actions within this periodic trigger.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PeriodicDisposableTrigger`1.#ctor(System.Single)">
            <param name="period">How frequently this trigger should fire.</param>
        </member>
        <member name="M:WCSharp.Events.PeriodicDisposableTrigger`1.Add(`0)">
            <summary>
            Adds the given periodicTrigger to automatic management.
            </summary>
        </member>
        <member name="T:WCSharp.Events.PeriodicEvent">
            <summary>
            Represents a single periodic event that will invoke <see cref="P:WCSharp.Events.PeriodicEvent.Method"/> every <see cref="P:WCSharp.Events.PeriodicEvent.Interval"/>.
            </summary>
        </member>
        <member name="P:WCSharp.Events.PeriodicEvent.Method">
            <summary>
            The function that will be invoked every <see cref="P:WCSharp.Events.PeriodicEvent.Interval"/>. Return true for the event to be repeated.
            </summary>
        </member>
        <member name="P:WCSharp.Events.PeriodicEvent.Interval">
            <summary>
            Specifies the time in seconds of a single loop of this periodic event..
            </summary>
        </member>
        <member name="P:WCSharp.Events.PeriodicEvent.IntervalLeft">
            <summary>
            Indicates the time remaining until it will invoke <see cref="P:WCSharp.Events.PeriodicEvent.Method"/>.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PeriodicEvent.#ctor(System.Func{System.Boolean},System.Double)">
            <summary>
            Creates a new periodic event that will call the given method every interval.
            Must be added to <see cref="T:WCSharp.Events.PeriodicEvents"/> in order to be active.
            </summary>
        </member>
        <member name="T:WCSharp.Events.PeriodicEvents">
            <summary>
            Keeps track of all periodic events. The system runs at an interval defined by <see cref="F:WCSharp.Events.PeriodicEvents.SYSTEM_INTERVAL"/> (0.03125).
            </summary>
        </member>
        <member name="F:WCSharp.Events.PeriodicEvents.SYSTEM_INTERVAL">
            <summary>
            The speed at which the system operates.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PeriodicEvents.AddPeriodicEvent(System.Func{System.Boolean},System.Double)">
            <summary>
            Adds the given method to the periodic system. In most cases, you can ignore the return value.
            </summary>
            <param name="method">The method to execute. Must return a boolean to indicate whether to continue looping or abort the periodic event.</param>
            <param name="period">The speed at which this event should fire.</param>
        </member>
        <member name="M:WCSharp.Events.PeriodicEvents.AddPeriodicEvent(WCSharp.Events.PeriodicEvent)">
            <summary>
            Shorthand in case you already have an existing PeriodicEvent to resume.
            </summary>
        </member>
        <member name="T:WCSharp.Events.PeriodicTrigger`1">
            <summary>
            Helpful class that can be used to batch together multiple periodic events of the same type. Will automatically remove inactive triggers, and
            subscribe/unsubscribe from <see cref="T:WCSharp.Events.PeriodicEvents"/> based on whether any triggers are active.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WCSharp.Events.PeriodicTrigger`1.Actions">
            <summary>
            All currently active periodic actions within this periodic trigger.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PeriodicTrigger`1.#ctor(System.Single)">
            <param name="period">How frequently this trigger should fire.</param>
        </member>
        <member name="M:WCSharp.Events.PeriodicTrigger`1.Add(`0)">
            <summary>
            Adds the given periodicTrigger to automatic management.
            </summary>
        </member>
        <member name="T:WCSharp.Events.PlayerUnitEvent">
            <summary>
            Defines all built-in PlayerUnitEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents"/>.
            <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEventFilter(War3Api.Common.playerunitevent,System.String,System.Func{System.Int32})"/>.</para>
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.HeroTypeBecomesRevivable">
            <summary>
            Based on EVENT_PLAYER_HERO_REVIVABLE
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.HeroTypeCancelsRevive">
            <summary>
            Based on EVENT_PLAYER_HERO_REVIVE_CANCEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.HeroTypeFinishesRevive">
            <summary>
            Based on EVENT_PLAYER_HERO_REVIVE_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.HeroTypeLearnsSpell">
            <summary>
            Based on EVENT_PLAYER_HERO_SKILL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.HeroTypeLevels">
            <summary>
            Based on EVENT_PLAYER_HERO_LEVEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.HeroTypeStartsRevive">
            <summary>
            Based on EVENT_PLAYER_HERO_REVIVE_START
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ItemTypeIsDropped">
            <summary>
            Based on EVENT_PLAYER_UNIT_DROP_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ItemTypeIsPawned">
            <summary>
            Based on EVENT_PLAYER_UNIT_PAWN_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ItemTypeIsPickedUp">
            <summary>
            Based on EVENT_PLAYER_UNIT_PICKUP_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ItemTypeIsSold">
            <summary>
            Based on EVENT_PLAYER_UNIT_SELL_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ItemTypeIsStacked">
            <summary>
            Based on EVENT_PLAYER_UNIT_STACK_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ItemTypeIsUsed">
            <summary>
            Based on EVENT_PLAYER_UNIT_USE_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.PlayerDeselectsUnitType">
            <summary>
            Based on EVENT_PLAYER_UNIT_DESELECTED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.PlayerSelectsUnitType">
            <summary>
            Based on EVENT_PLAYER_UNIT_SELECTED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ResearchIsCancelled">
            <summary>
            Based on EVENT_PLAYER_UNIT_RESEARCH_CANCEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ResearchIsFinished">
            <summary>
            Based on EVENT_PLAYER_UNIT_RESEARCH_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.ResearchIsStarted">
            <summary>
            Based on EVENT_PLAYER_UNIT_RESEARCH_START
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellCast">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_CAST
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellCastOnUnitType">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_CAST
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellChannel">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_CHANNEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellChannelOnUnitType">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_CHANNEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellEffect">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_EFFECT
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellEffectOnUnitType">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_EFFECT
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellEndCast">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_ENDCAST
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellEndCastOnUnitType">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_ENDCAST
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellFinish">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellFinishOnUnitType">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.SpellLearnedByHeroType">
            <summary>
            Based on EVENT_PLAYER_HERO_SKILL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeAttacks">
            <summary>
            Based on EVENT_PLAYER_UNIT_ATTACKED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeCancelsBeingConstructed">
            <summary>
            Based on EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeCancelsBeingTrained">
            <summary>
            Based on EVENT_PLAYER_UNIT_TRAIN_CANCEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeCancelsConstruction">
            <summary>
            Based on EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeCancelsResearch">
            <summary>
            Based on EVENT_PLAYER_UNIT_RESEARCH_CANCEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeCancelsTraining">
            <summary>
            Based on EVENT_PLAYER_UNIT_TRAIN_CANCEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeCancelsUpgrade">
            <summary>
            Based on EVENT_PLAYER_UNIT_UPGRADE_CANCEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeChangesOwner">
            <summary>
            Based on EVENT_PLAYER_UNIT_CHANGE_OWNER
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeDamages">
            <summary>
            Based on EVENT_PLAYER_UNIT_DAMAGED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeDecays">
            <summary>
            Based on EVENT_PLAYER_UNIT_DECAY
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeDies">
            <summary>
            Based on EVENT_PLAYER_UNIT_DEATH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeDropsItem">
            <summary>
            Based on EVENT_PLAYER_UNIT_DROP_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeFinishesBeingConstructed">
            <summary>
            Based on EVENT_PLAYER_UNIT_CONSTRUCT_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeFinishesBeingTrained">
            <summary>
            Based on EVENT_PLAYER_UNIT_TRAIN_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeFinishesConstruction">
            <summary>
            Based on EVENT_PLAYER_UNIT_CONSTRUCT_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeFinishesResearch">
            <summary>
            Based on EVENT_PLAYER_UNIT_RESEARCH_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeFinishesTraining">
            <summary>
            Based on EVENT_PLAYER_UNIT_TRAIN_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeFinishesUpgrade">
            <summary>
            Based on EVENT_PLAYER_UNIT_UPGRADE_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsAttacked">
            <summary>
            Based on EVENT_PLAYER_UNIT_ATTACKED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsCreated">
            <summary>
            Based on 
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsDamaged">
            <summary>
            Based on EVENT_PLAYER_UNIT_DAMAGED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsDeselected">
            <summary>
            Based on EVENT_PLAYER_UNIT_DESELECTED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsDetected">
            <summary>
            Based on EVENT_PLAYER_UNIT_DETECTED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsHidden">
            <summary>
            Based on EVENT_PLAYER_UNIT_HIDDEN
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsLoaded">
            <summary>
            Based on EVENT_PLAYER_UNIT_LOADED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsRescued">
            <summary>
            Based on EVENT_PLAYER_UNIT_RESCUED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsSelected">
            <summary>
            Based on EVENT_PLAYER_UNIT_SELECTED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsSold">
            <summary>
            Based on EVENT_PLAYER_UNIT_SELL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeIsSummoned">
            <summary>
            Based on EVENT_PLAYER_UNIT_SUMMON
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeKills">
            <summary>
            Based on EVENT_PLAYER_UNIT_DEATH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeLoads">
            <summary>
            Based on EVENT_PLAYER_UNIT_LOADED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypePawnsItem">
            <summary>
            Based on EVENT_PLAYER_UNIT_PAWN_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypePicksUpItem">
            <summary>
            Based on EVENT_PLAYER_UNIT_PICKUP_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeReceivesOrder">
            <summary>
            Based on EVENT_PLAYER_UNIT_ISSUED_ORDER
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeReceivesPointOrder">
            <summary>
            Based on EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeReceivesTargetOrder">
            <summary>
            Based on EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeReceivesUnitOrder">
            <summary>
            Based on EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeRescues">
            <summary>
            Based on EVENT_PLAYER_UNIT_RESCUED
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeSellsItem">
            <summary>
            Based on EVENT_PLAYER_UNIT_SELL_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeSellsUnit">
            <summary>
            Based on EVENT_PLAYER_UNIT_SELL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeSpellCast">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_CAST
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeSpellChannel">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_CHANNEL
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeSpellEffect">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_EFFECT
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeSpellEndCast">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_ENDCAST
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeSpellFinish">
            <summary>
            Based on EVENT_PLAYER_UNIT_SPELL_FINISH
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeStacksItem">
            <summary>
            Based on EVENT_PLAYER_UNIT_STACK_ITEM
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeStartsBeingConstructed">
            <summary>
            Based on EVENT_PLAYER_UNIT_CONSTRUCT_START
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeStartsBeingTrained">
            <summary>
            Based on EVENT_PLAYER_UNIT_TRAIN_START
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeStartsConstruction">
            <summary>
            Based on EVENT_PLAYER_UNIT_CONSTRUCT_START
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeStartsResearch">
            <summary>
            Based on EVENT_PLAYER_UNIT_RESEARCH_START
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeStartsTraining">
            <summary>
            Based on EVENT_PLAYER_UNIT_TRAIN_START
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeStartsUpgrade">
            <summary>
            Based on EVENT_PLAYER_UNIT_UPGRADE_START
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeSummons">
            <summary>
            Based on EVENT_PLAYER_UNIT_SUMMON
            </summary>
        </member>
        <member name="F:WCSharp.Events.PlayerUnitEvent.UnitTypeUsesItem">
            <summary>
            Based on EVENT_PLAYER_UNIT_USE_ITEM
            </summary>
        </member>
        <member name="T:WCSharp.Events.PlayerUnitEvents">
            <summary>
            Manager for all Warcraft III <see cref="T:War3Api.Common.playerunitevent"/>s. Will bundle together and is able to efficiently filter on specific data.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PlayerUnitEvents.Register(WCSharp.Events.PlayerUnitEvent,System.Action)">
            <summary>
            Register the given action for execution whenever the given event fires.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PlayerUnitEvents.Register(WCSharp.Events.PlayerUnitEvent,System.Action,System.Int32)">
            <summary>
            Register the given action for execution whenever the given event fires.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PlayerUnitEvents.Register(System.String,System.Action,System.Int32)">
            <summary>
            Register the given action for execution whenever the given custom event fires.
            The identifier should be added via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEventFilter(War3Api.Common.playerunitevent,System.String,System.Func{System.Int32})"/> prior to registration.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PlayerUnitEvents.Unregister(WCSharp.Events.PlayerUnitEvent,System.Action)">
            <summary>
            Unregisters a previously registered event.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PlayerUnitEvents.Unregister(WCSharp.Events.PlayerUnitEvent,System.Int32)">
            <summary>
            Unregisters a previously registered event.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PlayerUnitEvents.Unregister(System.String,System.Int32)">
            <summary>
            Unregisters a previously registered event.
            The identifier should be added via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEventFilter(War3Api.Common.playerunitevent,System.String,System.Func{System.Int32})"/> prior to registration.
            </summary>
        </member>
        <member name="M:WCSharp.Events.PlayerUnitEvents.AddCustomEventFilter(War3Api.Common.playerunitevent,System.String,System.Func{System.Int32})">
            <summary>
            Adds a custom event. Custom events act as filters to a native playerunitevent. They will automatically be bundled with any other events
            attached to that same playerunitevent. Useful when you want multiple events for something not covered by the default provided
            <see cref="T:WCSharp.Events.PlayerUnitEvent"/>s.
            <para>For example, the custom event equivalent of <see cref="F:WCSharp.Events.PlayerUnitEvent.UnitTypeKills"/> would be 
            AddCustomEventFilter(<see cref="F:War3Api.Common.EVENT_PLAYER_UNIT_DEATH"/>, "SomeIdentifier", () => GetUnitTypeId(GetKillingUnit()))</para>
            </summary>
            <param name="wcEvent">The native WarCraft 3 event to base this custom event on</param>
            <param name="identifier">A unique identifier for this custom event</param>
            <param name="filterFunc">A function by which can be filtered</param>
        </member>
    </members>
</doc>
