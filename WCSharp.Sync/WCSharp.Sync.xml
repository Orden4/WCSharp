<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCSharp.Sync</name>
    </assembly>
    <members>
        <member name="T:WCSharp.Sync.SyncPacket">
            <summary>
            Represents a single packet of 255 characters being sent via sync. To send as much as possible per packet, the property names are shortened.
            </summary>
        </member>
        <member name="P:WCSharp.Sync.SyncPacket.P">
            <summary>
            PlayerId.
            </summary>
        </member>
        <member name="P:WCSharp.Sync.SyncPacket.M">
            <summary>
            Message. Maximum <see cref="F:WCSharp.Sync.SyncSystem.PACKET_SIZE"/> characters long.
            </summary>
        </member>
        <member name="T:WCSharp.Sync.SyncSystem">
            <summary>
            The <see cref="T:WCSharp.Sync.SyncSystem"/> sets up a communication channel via the BlzSync functions and allows for the transfer of generically typed data
            across it. Data is automatically split into packets to allow for any amount of data to be transferred across.
            </summary>
            <remarks>
            This system reserves the sync prefixes __WCSharpSyncHeaders and __WCSharpSyncPackets. Nothing else should use these prefixes to send data.
            </remarks>
            This system is set up so that it can process a single message type per player simultaneously. This is based on the assumption that messages
            will never be interrupted midway during sending, and always arrive in the same order as they were sent (tests seem to confirm this).
            Tests also seem to confirm that messages from different players do not get mixed, but since it's hard to be certain without large scale tests
            the system is set up to process one message for each player at any time. If it is true that the player sequence is always the same, this
            could be skipped. But realistically, this only saves a few table lookups anyway, and the table is kept empty when not receiving, meaning the
            memory footprint is basically the same as well.
        </member>
        <member name="M:WCSharp.Sync.SyncSystem.Send``1(``0)">
            <summary>
            Syncs the given data across all clients. Use <see cref="M:WCSharp.Sync.SyncSystem.Subscribe``1(System.Action{``0})"/> in order to set up receiving of certain types of messages.
            </summary>
        </member>
        <member name="M:WCSharp.Sync.SyncSystem.BuildPackets(System.String,System.Int32)">
            <summary>
            Splits packets, taking into account added length from escaping the message data.
            </summary>
        </member>
        <member name="M:WCSharp.Sync.SyncSystem.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes the given <paramref name="handler"/> to be called when messages of type <typeparamref name="T"/> are sent across the <see cref="T:WCSharp.Sync.SyncSystem"/>.
            </summary>
        </member>
        <member name="M:WCSharp.Sync.SyncSystem.Unsubscribe``1(System.Action{``0})">
            <summary>
            Unsubscribes the given <paramref name="handler"/> from the <see cref="T:WCSharp.Sync.SyncSystem"/>.
            </summary>
        </member>
    </members>
</doc>
