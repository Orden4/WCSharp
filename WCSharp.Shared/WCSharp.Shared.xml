<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCSharp.Shared</name>
    </assembly>
    <members>
        <member name="T:WCSharp.Utils.Base64">
            <summary>
            Conversion courtesy of http://lua-users.org/wiki/BaseSixtyFour
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Base64.SetCharset(System.String)">
            <summary>
            If you really don't want people to read your Base64 strings, you can use this to change the base character set, making online converters useless.
            <para>A custom set must be exactly 64 characters long and use the same set of characters as regular Base64. You can only change the order.</para>
            <para>Default: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</para>
            <para>WARNING: Changing this will break any existing saves!</para>
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Base64.ToBase64(System.String)">
            <summary>
            Converts the given string into a Base64 string.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Base64.FromBase64(System.String)">
            <summary>
            Converts the given Base64 string into a regular string.
            </summary>
        </member>
        <member name="T:WCSharp.Utils.Data.Point">
            <summary>
            Data class for a simple point coordinate.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Point.X">
            <summary>
            The X-coordinate of this point.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Point.Y">
            <summary>
            The Y-coordinate of this point.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Point.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new point at the given X and Y cooridnates.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Point.op_Equality(WCSharp.Utils.Data.Point,WCSharp.Utils.Data.Point)">
            <summary>
            True if the X and Y coordinates of the two points match.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Point.op_Inequality(WCSharp.Utils.Data.Point,WCSharp.Utils.Data.Point)">
            <summary>
            True if the X and Y coordinates of the two points do not match.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Point.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:WCSharp.Utils.Data.Point.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:WCSharp.Utils.Data.Rectangle">
            <summary>
            Data class that mimics the functions of the standard Rect.cs while providing access to WC3 rect and region representations.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.WorldBounds">
            <summary>
            Represents the world bounds of the map. Automatically initialised.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Left">
            <summary>
            The left-most X coordinate.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Bottom">
            <summary>
            The bottom-most Y coordinate.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Right">
            <summary>
            The right-most X coordinate.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Top">
            <summary>
            The top-most Y coordinate.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Rect">
            <summary>
            The Warcraft III rect. Generated on demand.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Region">
            <summary>
            The Warcraft III region. Generated on demand.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Width">
            <summary>
            The distance between the right-most and left-most coordinates.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Height">
            <summary>
            The distance between the top-most and bottom-most coordinates.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.TopLeft">
            <summary>
            The point corresponding to the top-left of the rectangle.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.TopRight">
            <summary>
            The point corresponding to the top-right of the rectangle.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.BottomLeft">
            <summary>
            The point corresponding to the bottom-left of the rectangle.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.BottomRight">
            <summary>
            The point corresponding to the bottom-right of the rectangle.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.Center">
            <summary>
            The point corresponding to the center of the rectangle.
            </summary>
        </member>
        <member name="P:WCSharp.Utils.Data.Rectangle.IsEmpty">
            <summary>
            A Rectangle is empty if its width or height is 0.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.#ctor(War3Api.Common.rect)">
            <summary>
            Creates a new rectangle using the given Warcraft III rect as a base.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new rectangle with the given set of coordinates.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.#ctor(System.Collections.Generic.IEnumerable{WCSharp.Utils.Data.Point})">
            <summary>
            Creates a Rectangle that encompasses all of the given points within its surface area.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.op_Equality(WCSharp.Utils.Data.Rectangle,WCSharp.Utils.Data.Rectangle)">
            <summary>
            True if all coordinates of <paramref name="rect1"/> match those of <paramref name="rect2"/>.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.op_Inequality(WCSharp.Utils.Data.Rectangle,WCSharp.Utils.Data.Rectangle)">
            <summary>
            True if any coordinates of <paramref name="rect1"/> do not match those of <paramref name="rect2"/>.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.GetRandomPoint">
            <summary>
            Retrieves a random (inclusive) point in this rectangle.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Contains(System.Single,System.Single)">
            <summary>
            Returns whether the given coordinates are located within this Rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Contains(WCSharp.Utils.Data.Point)">
            <summary>
            Returns whether the given Point is located within this Rectangle.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Contains(WCSharp.Utils.Data.Rectangle)">
            <summary>
            Returns whether the given Rectangle is located fully within this Rectangle.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.IntersectsWith(WCSharp.Utils.Data.Rectangle)">
            <summary>
            Returns whether this Rectangle has any point where it touches or overlaps with the given Rectangle.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Union(WCSharp.Utils.Data.Rectangle,WCSharp.Utils.Data.Rectangle)">
            <summary>
            Returns a new Rectangle that represents the union of the two given Rectangles. Meaning, a new square that can encompass both.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Intersect(WCSharp.Utils.Data.Rectangle,WCSharp.Utils.Data.Rectangle)">
            <summary>
            Returns a new Rectangle that represents the intersection of the two given Rectangles. Meaning, the area in which they overlap.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Offset(WCSharp.Utils.Data.Rectangle,System.Single,System.Single)">
            <summary>
            Returns a new Rectangle that is offset by the given coordinates, using <see cref="P:WCSharp.Utils.Data.Rectangle.TopLeft"/> as the origin for movement.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Inflate(WCSharp.Utils.Data.Rectangle,System.Single,System.Single)">
            <summary>
            Returns a new Rectangle that is inflated by the given width and height in all directions.
            <para>The increase on each side is half the width/height.</para>
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Scale(WCSharp.Utils.Data.Rectangle,System.Single,System.Single)">
            <summary>
            Returns a new Rectangle that is scaled up by the given scaling factors.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Dispose">
            <summary>
            Must be called in order to safely garbage collect <see cref="P:WCSharp.Utils.Data.Rectangle.Rect"/> and <see cref="P:WCSharp.Utils.Data.Rectangle.Region"/>.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:WCSharp.Utils.Data.Rectangle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:WCSharp.Utils.Delay">
            <summary>
            Basic helper class to create 0 second delays on executing actions.
            <para>This can be used to circumvent various issues, such as unit AI locking up if you give them a new order at the same time as they start an attack.</para>
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Delay.Add(System.Action)">
            <summary>
            <para>Will execute the given action after a 0 second delay, which translates to a single frame.</para>
            <para>This can be used to circumvent various issues, such as unit AI locking up if you give them a new order at the same time as they start an attack.</para>
            </summary>
        </member>
        <member name="T:WCSharp.Utils.Extensions.GroupExtensions">
            <summary>
            Extension class that defines a number of methods to simplify working with Warcraft III groups.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Extensions.GroupExtensions.Enumerate(War3Api.Common.group)">
            <summary>
            Enumerates all units within the group. This will empty the group in the process.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Extensions.GroupExtensions.Enumerate(War3Api.Common.group,System.Func{War3Api.Common.unit,System.Boolean})">
            <summary>
            Enumerates all units within the group that match the given filter. This will empty the group in the process.
            </summary>
        </member>
        <member name="T:WCSharp.Utils.Extensions.ListExtensions">
            <summary>
            Extension class that defines a number of methods to simplify working with lists, in particular within context of Warcraft III.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Extensions.ListExtensions.IterateWithRemoval``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Due to C# to Lua conversion difficulties, standard ways of enumerating a list while removing items from it may not work.
            This extension method will safely iterate the list, and remove any which return false.
            </summary>
        </member>
        <member name="T:WCSharp.Utils.Extensions.UnitExtensions">
            <summary>
            Extension class that defines a number of methods to simplify working with Warcraft III units.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Extensions.UnitExtensions.Damage(War3Api.Common.unit,War3Api.Common.unit,System.Single,War3Api.Common.attacktype,War3Api.Common.damagetype)">
            <summary>
            Shorthand for damaging a unit, as the default has many arguments that arent't generally used.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Extensions.UnitExtensions.Heal(War3Api.Common.unit,System.Single)">
            <summary>
            Shorthand for healing a unit.
            </summary>
        </member>
        <member name="T:WCSharp.Utils.Util">
            <summary>
            Defines a number of miscellaneous useful methods and constants. 
            </summary>
        </member>
        <member name="F:WCSharp.Utils.Util.TEXT_SIZE_MULTIPLIER">
            <summary>
            This multiplier will translate GUI-like floating text size values into the values Warcraft III expects them to be.
            </summary>
        </member>
        <member name="F:WCSharp.Utils.Util.TEXT_VELOCITY_MULTIPLIER">
            <summary>
            This multiplier will translate GUI-like floating text velocity values into the values Warcraft III expects them to be.
            </summary>
        </member>
        <member name="F:WCSharp.Utils.Util.DEG2RAD">
            <summary>
            A shortcut for <see cref="M:War3Api.Common.Deg2Rad(System.Single)"/>.
            </summary>
        </member>
        <member name="F:WCSharp.Utils.Util.RAD2DEG">
            <summary>
            A shortcut for <see cref="M:War3Api.Common.Rad2Deg(System.Single)"/>.
            </summary>
        </member>
        <member name="F:WCSharp.Utils.Util.PI">
            <summary>
            A shortcut for <see cref="F:War3Api.Blizzard.bj_PI"/>.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.Debug(System.Object)">
            <summary>
            Outputs the given data as text to the local player at the default position.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.DisplayTextToAll(System.String)">
            <summary>
            Displays the given text to everyone at the default position.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.DistanceBetweenPoints(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the distance from (<paramref name="x1"/>, <paramref name="y1"/>) to (<paramref name="x2"/>, <paramref name="y2"/>).
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.DistanceBetweenPoints(War3Api.Common.unit,System.Single,System.Single)">
            <summary>
            Calculates the distance from <paramref name="source"/> unit to (<paramref name="x2"/>, <paramref name="y2"/>).
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.DistanceBetweenPoints(System.Single,System.Single,War3Api.Common.unit)">
            <summary>
            Calculates the distance from (<paramref name="x1"/>, <paramref name="y1"/>) to <paramref name="target"/> unit.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.DistanceBetweenPoints(War3Api.Common.unit,War3Api.Common.unit)">
            <summary>
            Calculates the distance from <paramref name="source"/> unit to <paramref name="target"/> unit.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.AngleBetweenPoints(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the angle in degrees from (<paramref name="x1"/>, <paramref name="y1"/>) to (<paramref name="x2"/>, <paramref name="y2"/>).
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.AngleBetweenPoints(War3Api.Common.unit,System.Single,System.Single)">
            <summary>
            Calculates the angle in degrees from <paramref name="source"/> unit to (<paramref name="x2"/>, <paramref name="y2"/>).
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.AngleBetweenPoints(System.Single,System.Single,War3Api.Common.unit)">
            <summary>
            Calculates the angle in degrees from (<paramref name="x1"/>, <paramref name="y1"/>) to <paramref name="target"/> unit.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.AngleBetweenPoints(War3Api.Common.unit,War3Api.Common.unit)">
            <summary>
            Calculates the angle in degrees from <paramref name="source"/> unit to <paramref name="target"/> unit.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.AngleBetweenPointsRad(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the angle in radians from (<paramref name="x1"/>, <paramref name="y1"/>) to (<paramref name="x2"/>, <paramref name="y2"/>).
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.AngleBetweenPointsRad(War3Api.Common.unit,System.Single,System.Single)">
            <summary>
            Calculates the angle in radians from <paramref name="source"/> unit to (<paramref name="x2"/>, <paramref name="y2"/>).
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.AngleBetweenPointsRad(System.Single,System.Single,War3Api.Common.unit)">
            <summary>
            Calculates the angle in radians from (<paramref name="x1"/>, <paramref name="y1"/>) to <paramref name="target"/> unit.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.AngleBetweenPointsRad(War3Api.Common.unit,War3Api.Common.unit)">
            <summary>
            Calculates the angle in radians from <paramref name="source"/> unit to <paramref name="target"/> unit.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.PositionWithPolarOffset(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates a point that is the given offset away from (<paramref name="x"/>, <paramref name="y"/>) at the target degrees.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.PositionWithPolarOffsetRad(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates a point that is the given offset away from (<paramref name="x"/>, <paramref name="y"/>) at the target radians.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.IsAttackerBehindUnit(War3Api.Common.unit,War3Api.Common.unit,System.Single)">
            <summary>
            <para>Determines whether the attacker is behind the attacked with the given tolerance in degrees.</para>
            <para>A tolernace of 360 would mean the target can be attacked from anywhere while being considered "behind".</para>
            </summary>
            <param name="attacker">The unit performing the attack.</param>
            <param name="attacked">The unit being attacked.</param>
            <param name="tolerance">In degrees.</param>
        </member>
        <member name="M:WCSharp.Utils.Util.IsAttackerInfrontUnit(War3Api.Common.unit,War3Api.Common.unit,System.Single)">
            <summary>
            <para>Determines whether the attacker is in front of the attacked with the given tolerance in degrees.</para>
            <para>A tolernace of 360 means the target can be attacked from anywhere while being considered "infront".</para>
            </summary>
            <param name="attacker">The unit performing the attack.</param>
            <param name="attacked">The unit being attacked.</param>
            <param name="tolerance">In degrees.</param>
        </member>
        <member name="M:WCSharp.Utils.Util.EnumeratePlayers(War3Api.Common.playerslotstate,War3Api.Common.mapcontrol)">
            <summary>
            Returns all players matching the given <paramref name="playerslotstate"/> and <paramref name="mapcontrol"/>.
            </summary>
            <param name="playerslotstate">The <see cref="T:War3Api.Common.playerslotstate"/> that players should have. Defaults to <see cref="F:War3Api.Common.PLAYER_SLOT_STATE_PLAYING"/>.</param>
            <param name="mapcontrol">The <see cref="T:War3Api.Common.mapcontrol"/> that players should have. Defaults to <see cref="F:War3Api.Common.MAP_CONTROL_USER"/>.</param>
            <returns></returns>
        </member>
        <member name="M:WCSharp.Utils.Util.EnumeratePlayers">
            <summary>
            Returns all players.
            </summary>
        </member>
        <member name="M:WCSharp.Utils.Util.CreateDamageText(System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Creates a "damage text" style of floating text at the target location.</para>
            <para>By default, the text will start to fade after 2 seconds, and be fully removed after 4 seconds.</para>
            </summary>
            <param name="damage">The damage number to display (will round to whole numbers).</param>
            <param name="isHeal">If true, will color green.</param>
            <param name="isCritical">If true, will add an exclamation mark.</param>
            <param name="size">The size of the text. See GUI.</param>
            <param name="x">The x position that the text should be created at.</param>
            <param name="y">The y position that the text should be created at.</param>
            <param name="height">The height that the text should be created at, relative to the target (x, y) position.</param>
        </member>
        <member name="M:WCSharp.Utils.Util.CreateFloatText(System.String,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Creates a floating text at the target location.</para>
            <para>By default, the text will start to fade after 2 seconds, and be fully removed after 4 seconds.</para>
            </summary>
            <param name="text">The text to display.</param>
            <param name="size">The size of the text. See GUI.</param>
            <param name="x">The x position that the text should be created at.</param>
            <param name="y">The y position that the text should be created at.</param>
            <param name="height">The height that the text should be created at, relative to the target (x, y) position.</param>
            <param name="red">The red value of the text. Should be in the range of 0 (none) to 255 (pure red).</param>
            <param name="green">The green value of the text. Should be in the range of 0 (none) to 255 (pure green).</param>
            <param name="blue">The blue value of the text. Should be in the range of 0 (none) to 255 (pure blue).</param>
        </member>
    </members>
</doc>
